diff -rdBEZN ../../../Scenarios/booking/high_debt/booking/ClassRoom.java .submission/booking/ClassRoom.java
15c15
<     private final List<Booking> bs = new LinkedList<>();
---
>     protected final List<Booking> bs = new LinkedList<>();
41c41
<     private boolean available(Interval interval) {
---
>     protected boolean available(Interval interval) {
71c71
<     private static boolean startBeforeEnd(Interval i) {
---
>     protected static boolean startBeforeEnd(Interval i) {
75c75
<     private static boolean startAndEndAtHour(Interval i) {
---
>     protected static boolean startAndEndAtHour(Interval i) {
diff -rdBEZN ../../../Scenarios/booking/high_debt/booking/ComputerClassRoom.java .submission/booking/ComputerClassRoom.java
0a1,39
> package booking;
> 
> import java.time.LocalDateTime;
> import java.time.temporal.ChronoField;
> import java.util.LinkedList;
> import java.util.List;
> import java.util.Objects;
> import java.util.Optional;
> 
> public class ComputerClassRoom extends ClassRoom{
> 	int start;
> 	int end;
> 	public ComputerClassRoom(String n, String d, boolean p, int start, int end){
> 		super(n,d,p);
> 		this.start = start;
> 		this.end = end;
> 	}
>     public Optional<Booking> book(Interval i, User u) {
>     if (
>         i.getStart().with(ChronoField.HOUR_OF_DAY, 0).isAfter(i.getEnd())
>         || !available(i)
>         || !startAndEndAtHour(i)
>         || !startBeforeEnd(i)
>         || !isInOpenHours(i)
>     ) {
>         return Optional.empty();
>     }
> 
>     Booking b = new Booking(i, u);
>     bs.add(b);
> 
>     return Optional.of(b);
>     }
>     private boolean isInOpenHours(Interval i){
>     	int s = i.getStart().getHour();
>     	int e = i.getEnd().getHour();
>     	return s>=start && e<= end;
>     }
> }
\ No newline at end of file
