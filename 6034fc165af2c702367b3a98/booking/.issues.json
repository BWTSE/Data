[
    {
        "rule": "java:S1228",
        "file": "booking-high-6034fc165af2c702367b3a98",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a 'package-info.java' file to document the '.submission/booking' package",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "AvailableFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "6 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "AvailableFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "6 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "AvailableFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "AvailableFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 3
    },
    {
        "rule": "java:S1106",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 9
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'AvailableFilter' looks like designed for extension (can be subclassed), but the method 'valid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AvailableFilter' final or making the method 'valid' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 9
    },
    {
        "rule": "java:S1106",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 10
    },
    {
        "rule": "java:S1106",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 13
    },
    {
        "rule": "java:S1106",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 14
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "Booking.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "13 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "Booking.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "15 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "Booking.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "Booking.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "codehawk:InsufficientModularation",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "This class has InsufficientModularation, there should be over 20 public interfaces, eihther over 30 methods, or has complexity count over 100 times.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 5
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 9
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 14
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'getInterval' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'getInterval' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 14
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 18
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'getBooker' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'getBooker' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 18
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 22
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 22
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 23
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 24
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 28
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 37
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 37
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 38
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 45
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 45
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 46
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "ClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "20 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "ClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "15 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "ClassRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Missing package-info.java file.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "ClassRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 10
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 10
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 20
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 30
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 30
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 34
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 34
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 38
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'hasProjector' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'hasProjector' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 38
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 42
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'getBookings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'getBookings' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 42
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 46
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'book' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'book' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 46
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 47
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 48
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 56
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 56
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 57
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 62
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 62
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 63
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 67
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 67
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 68
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "19 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "23 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "ComputerClassRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "ComputerClassRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 10
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 10
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 19
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 31
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 31
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 35
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 35
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'hasProjector' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'hasProjector' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 39
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 39
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'getBookings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'getBookings' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 43
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 43
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'getHourOpening' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'getHourOpening' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 47
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 47
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'getHourClosing' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'getHourClosing' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 51
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 51
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 55
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'book' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'book' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 55
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 56
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 57
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 65
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 65
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 66
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 71
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 71
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 72
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 76
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 76
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 77
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "5 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "4 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 3
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 11
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoomOpenFilter' looks like designed for extension (can be subclassed), but the method 'valid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoomOpenFilter' final or making the method 'valid' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 11
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 12
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "Filter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "5 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "Filter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "7 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "Filter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "Filter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 3
    },
    {
        "rule": "codehawk:InsufficientModularation",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "This class has InsufficientModularation, there should be over 20 public interfaces, eihther over 30 methods, or has complexity count over 100 times.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 3
    },
    {
        "rule": "java:S1106",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 8
    },
    {
        "rule": "java:S1106",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 14
    },
    {
        "rule": "java:S1106",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 15
    },
    {
        "rule": "java:S1106",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 17
    },
    {
        "rule": "java:S1108",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this \"else\" keyword to a new dedicated line.",
        "line": 17
    },
    {
        "rule": "java:S1106",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 22
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "GroupRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "15 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "GroupRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "20 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "GroupRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "GroupRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 9
    },
    {
        "rule": "codehawk:InsufficientModularation",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "This class has InsufficientModularation, there should be over 20 public interfaces, eihther over 30 methods, or has complexity count over 100 times.",
        "line": 9
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 9
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 19
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 29
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 29
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 33
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 33
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 37
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'hasWhiteboard' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'hasWhiteboard' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 37
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 41
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'getBookings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'getBookings' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 41
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 45
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'book' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'book' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 45
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 46
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 47
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 54
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 54
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 55
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 60
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 60
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 61
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 65
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 65
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 66
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "Interval.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "15 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "Interval.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "17 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "Interval.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "Interval.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 7
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 7
    },
    {
        "rule": "codehawk:InsufficientModularation",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "This class has InsufficientModularation, there should be over 20 public interfaces, eihther over 30 methods, or has complexity count over 100 times.",
        "line": 7
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 11
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'getStart' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'getStart' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 16
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 16
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'getEnd' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'getEnd' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 20
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 20
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'isDuring' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'isDuring' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 24
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 24
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'overlapsWith' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'overlapsWith' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 28
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 28
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 34
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 34
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 35
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 36
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 40
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 49
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 49
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 50
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 54
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 54
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 55
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "Room.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "3 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "Room.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "Room.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 6
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 6
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'abstract' should be explicit.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'public' should be explicit.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'abstract' should be explicit.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'public' should be explicit.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'abstract' should be explicit.",
        "line": 9
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'public' should be explicit.",
        "line": 9
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'abstract' should be explicit.",
        "line": 10
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'public' should be explicit.",
        "line": 10
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "7 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "7 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 6
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 6
    },
    {
        "rule": "java:S1106",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 12
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'StartAndEndAtHourFilter' looks like designed for extension (can be subclassed), but the method 'valid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StartAndEndAtHourFilter' final or making the method 'valid' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 12
    },
    {
        "rule": "java:S1106",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 13
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "StartBeforeEndFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "3 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "StartBeforeEndFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "4 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "StartBeforeEndFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "StartBeforeEndFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 5
    },
    {
        "rule": "java:S1106",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 11
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'StartBeforeEndFilter' looks like designed for extension (can be subclassed), but the method 'valid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'StartBeforeEndFilter' final or making the method 'valid' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 11
    },
    {
        "rule": "java:S1106",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 12
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "User.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "9 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "User.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "12 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "User.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "User.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "codehawk:InsufficientModularation",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "This class has InsufficientModularation, there should be over 20 public interfaces, eihther over 30 methods, or has complexity count over 100 times.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 5
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 10
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 15
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 15
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 19
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'getEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getEmail' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 19
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 23
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 23
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 24
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 25
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 29
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 37
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 37
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 38
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 42
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 42
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 43
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "6 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "6 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 5
    },
    {
        "rule": "java:S1106",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 11
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'UserAlreadyHasBookingFilter' looks like designed for extension (can be subclassed), but the method 'valid' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'UserAlreadyHasBookingFilter' final or making the method 'valid' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 11
    },
    {
        "rule": "java:S1106",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 12
    },
    {
        "rule": "java:S1106",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 15
    },
    {
        "rule": "java:S1106",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 16
    },
    {
        "rule": "java:S113",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a new line at the end of this file.",
        "line": 0
    },
    {
        "rule": "java:S105",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File does not end with a newline.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "AvailableFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 4
    },
    {
        "rule": "common-java:DuplicatedBlocks",
        "file": "ClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "1 duplicated blocks of code must be removed.",
        "line": 0
    },
    {
        "rule": "java:S105",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "java:S1128",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.time.LocalDateTime'.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "ClassRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.time.LocalDateTime.",
        "line": 3
    },
    {
        "rule": "java:S1128",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.time.temporal.ChronoField'.",
        "line": 4
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "ClassRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.time.temporal.ChronoField.",
        "line": 4
    },
    {
        "rule": "java:S1128",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.util.Optional'.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "ClassRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.util.Optional.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 16
    },
    {
        "rule": "java:S1126",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace this if-then-else statement by a single return statement.",
        "line": 48
    },
    {
        "rule": "common-java:DuplicatedBlocks",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "1 duplicated blocks of code must be removed.",
        "line": 0
    },
    {
        "rule": "java:S113",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a new line at the end of this file.",
        "line": 0
    },
    {
        "rule": "java:S105",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File does not end with a newline.",
        "line": 1
    },
    {
        "rule": "java:S1128",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.time.LocalDateTime'.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "ComputerClassRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.time.LocalDateTime.",
        "line": 3
    },
    {
        "rule": "java:S1128",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.time.temporal.ChronoField'.",
        "line": 4
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "ComputerClassRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.time.temporal.ChronoField.",
        "line": 4
    },
    {
        "rule": "java:S1128",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.util.Optional'.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "ComputerClassRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.util.Optional.",
        "line": 8
    },
    {
        "rule": "codehawk:AvoidUnutilizedAbstraction",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "It is Unutilized Abstraction",
        "line": 10
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 11
    },
    {
        "rule": "fb-contrib:FCCD_FIND_CLASS_CIRCULAR_DEPENDENCY",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "BUG",
        "message": "Class booking.ComputerClassRoom has a circular dependency with other classes",
        "line": 14
    },
    {
        "rule": "java:S1659",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Declare \"hourClosing\" on a separate line.",
        "line": 16
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Each variable declaration must be in its own statement.",
        "line": 16
    },
    {
        "rule": "java:S1126",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace this if-then-else statement by a single return statement.",
        "line": 57
    },
    {
        "rule": "findbugs:EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "booking.ComputerClassRoom.equals(Object) checks for operand being a ClassRoom",
        "line": 68
    },
    {
        "rule": "fb-contrib:NSE_NON_SYMMETRIC_EQUALS",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "BUG",
        "message": "Equals method booking.ComputerClassRoom.equals(Object) compares this object against other types in a non symmetric way",
        "line": 68
    },
    {
        "rule": "java:S113",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a new line at the end of this file.",
        "line": 0
    },
    {
        "rule": "java:S105",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "java:S4274",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Replace this assert with a proper check.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File does not end with a newline.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 4
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Unnecessary parentheses around expression.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Comment has incorrect indentation level 2, expected is 8, indentation should be the same level as line 19.",
        "line": 18
    },
    {
        "rule": "java:S103",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Split this 139 characters long line (which is greater than 120 authorized).",
        "line": 19
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "ComputerClassRoomOpenFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 139).",
        "line": 19
    },
    {
        "rule": "java:S113",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a new line at the end of this file.",
        "line": 0
    },
    {
        "rule": "java:S105",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File does not end with a newline.",
        "line": 1
    },
    {
        "rule": "java:S118",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Rename this abstract class name to match the regular expression '^Abstract[A-Z][a-zA-Z0-9]*$'.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.AbstractClassNameCheck",
        "file": "Filter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Name 'Filter' must match pattern '^Abstract.+$'.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "Filter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 4
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck",
        "file": "Filter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Variable 'room' must be private and have accessor methods.",
        "line": 5
    },
    {
        "rule": "java:S105",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "java:S1128",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.time.LocalDateTime'.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "GroupRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.time.LocalDateTime.",
        "line": 3
    },
    {
        "rule": "java:S1128",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.util.Optional'.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "GroupRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.util.Optional.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 17
    },
    {
        "rule": "java:S1126",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace this if-then-else statement by a single return statement.",
        "line": 47
    },
    {
        "rule": "fb-contrib:OCP_OVERLY_CONCRETE_PARAMETER",
        "file": "Interval.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "booking.Interval.isDuring(LocalDateTime): 1st parameter '' could be declared as java.time.chrono.ChronoLocalDateTime instead",
        "line": 25
    },
    {
        "rule": "java:S1128",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Remove this unused import 'java.util.Optional'.",
        "line": 4
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
        "file": "Room.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "Unused import - java.util.Optional.",
        "line": 4
    },
    {
        "rule": "java:S113",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a new line at the end of this file.",
        "line": 0
    },
    {
        "rule": "java:S105",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File does not end with a newline.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "StartAndEndAtHourFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 110).",
        "line": 24
    },
    {
        "rule": "java:S113",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a new line at the end of this file.",
        "line": 0
    },
    {
        "rule": "java:S105",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File does not end with a newline.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "StartBeforeEndFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 6
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "StartBeforeEndFilter.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 117).",
        "line": 15
    },
    {
        "rule": "java:S113",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a new line at the end of this file.",
        "line": 0
    },
    {
        "rule": "java:S105",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Replace all tab characters in this file by sequences of white-spaces.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File does not end with a newline.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck",
        "file": "UserAlreadyHasBookingFilter.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "File contains tab characters (this is the first instance).",
        "line": 6
    }
]