diff -rdBEZN ../../../Scenarios/booking/high_debt/booking/ClassRoom.java .submission/booking/ClassRoom.java
24a25,28
> 	protected void addBooking(Booking b){
> 		bs.add(b);
> 	
> 	}	
50a55,62
> 
> 	public boolean isBookable(Interval i, User u){
> 		return  !( i.getStart().with(ChronoField.HOUR_OF_DAY, 0).isAfter(i.getEnd())
> 	            || !available(i)
> 	            || !startAndEndAtHour(i)
> 	            || !startBeforeEnd(i));
> 	}
> 
56,61c68
<         if (
<             i.getStart().with(ChronoField.HOUR_OF_DAY, 0).isAfter(i.getEnd())
<             || !available(i)
<             || !startAndEndAtHour(i)
<             || !startBeforeEnd(i)
<         ) {
---
>         if (!isBookable(i,u)) {
diff -rdBEZN ../../../Scenarios/booking/high_debt/booking/ComputerClassRoom.java .submission/booking/ComputerClassRoom.java
0a1,39
> package booking;
> 
> 
> import java.time.LocalDateTime;
> import java.time.temporal.ChronoField;
> import java.util.LinkedList;
> import java.util.List;
> import java.util.Objects;
> import java.util.Optional;
> 
> public class ComputerClassRoom extends ClassRoom{
> 	
> 	int open,close;
> 	
> 	public ComputerClassRoom(String name, String desc, boolean hasProjector, int openingHr, int closingHr){
> 		super(name, desc, hasProjector);
> 		open = openingHr;
> 		close = closingHr;
> 	}
> 	
> 
> 
>     @Override
>     public Optional<Booking> book(Interval i, User u) {
>         if (!isBookable(i,u)
>             || i.getStart().getHour() < open
>             || i.getEnd().getHour() > close
>             
>         ) {
>             return Optional.empty();
>         }
> 
>         Booking b = new Booking(i, u);
>         addBooking(b);
> 
>         return Optional.of(b);
>     }
> 
> }
\ No newline at end of file
diff -rdBEZN ../../../Scenarios/booking/high_debt/booking/GroupRoom.java .submission/booking/GroupRoom.java
39c39
<     private boolean available(Interval i) {
---
>     protected boolean available(Interval i) {
65c65
<     private boolean userHasBookingAlready (User u) {
---
>     protected boolean userHasBookingAlready (User u) {
75c75
<     private static boolean startBeforeEnd(Interval i) {
---
>     protected static boolean startBeforeEnd(Interval i) {
