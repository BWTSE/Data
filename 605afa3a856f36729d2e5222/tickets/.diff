diff -rdBEZN ../../../Scenarios/tickets/high_debt/tickets/TicketTypeSeasonalRestricted.java .submission/tickets/TicketTypeSeasonalRestricted.java
0a1,85
> package tickets;
> 
> import java.util.EnumSet;
> import java.util.Objects;
> import java.util.Set;
> 
> public class TicketTypeSeasonalRestricted implements TicketType {
> 	
> 	private final String name;
>     private final double price;
>     private final Set<Zone> zoneSet;
>     private final Season validSeason;
>     private final Set<User.Occupation> userOccupationSet;
> 	
> 	public TicketTypeSeasonalRestricted(String n, double p, Set<Zone> zs, Season vs, Set<User.Occupation> uos) {
> 		this.name = n;
> 		this.price = p;
> 		this.zoneSet = zs;
> 		this.validSeason = vs;
> 		this.userOccupationSet = uos;
> 	}
> 	
> 	public String getName() {
>         return this.name;
>     }
> 
>     public double getPrice() {
>         return this.price;
>     }
> 
>     public Set<Zone> getValidZones() {
>         return EnumSet.copyOf(this.zoneSet);
>     }
>     
>     public Season getValidSeason() {
>         return this.validSeason;
>     }
>     
>     public Set<User.Occupation> getUserOccupation() {
>     	return EnumSet.copyOf(this.userOccupationSet);
>     }
>     
>     /*
>     Make sure that the trip is during the correct season.
>     Also checks that the ticket is valid in the zones of the trip.
>     Also checks if the user's occupation is valid with the ticket.
>      */
>     @Override
>     public boolean isValidFor(Trip t, User u) {
>         return this.getValidZones().contains(t.getStartZone())
>             && this.getValidZones().contains(t.getEndZone())
>             && this.getValidSeason().isDateWithin(t.getTripStartTime())
>             && this.getUserOccupation().contains(u.getOccupation());
>     }
>     
>     
>     @Override
>     public boolean equals(Object o) {
>         if (this == o) {
>             return true;
>         }
> 
>         if (o == null || this.getClass() != o.getClass()) {
>             return false;
>         }
> 
>         TicketTypeSeasonalRestricted tt = (TicketTypeSeasonalRestricted) o;
>         return Objects.equals(this.getName(), tt.getName())
>             && Objects.equals(this.getValidSeason(), tt.getValidSeason())
>             && Objects.equals(this.getValidZones(), tt.getValidZones())
>             && Objects.equals(this.getPrice(), tt.getPrice())
>             && Objects.equals(this.getUserOccupation(), tt.getUserOccupation());
>     }
> 
>     @Override
>     public int hashCode() {
>         return Objects.hash(this.getName(), this.getPrice(), this.getValidSeason());
>     }
> 
>     @Override
>     public String toString() {
>         return String.format("Ticket %s ", this.getName());
>     }
>     
> }
\ No newline at end of file
