[
    {
        "rule": "java:S1228",
        "file": "booking-high-6050e1e7856f36729d2e5219",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Add a 'package-info.java' file to document the '.submission/booking' package",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "BasicRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "20 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "BasicRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "22 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "BasicRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "BasicRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S118",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Rename this abstract class name to match the regular expression '^Abstract[A-Z][a-zA-Z0-9]*$'.",
        "line": 9
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 9
    },
    {
        "rule": "codehawk:AvoidUnutilizedAbstraction",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "It is Unutilized Abstraction",
        "line": 9
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 9
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.naming.AbstractClassNameCheck",
        "file": "BasicRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Name 'BasicRoom' must match pattern '^Abstract.+$'.",
        "line": 9
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 15
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 20
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'BasicRoom' looks like designed for extension (can be subclassed), but the method 'book' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRoom' final or making the method 'book' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 20
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 21
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 22
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 33
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'BasicRoom' looks like designed for extension (can be subclassed), but the method 'isAvailableDuring' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRoom' final or making the method 'isAvailableDuring' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 33
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 34
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 35
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 42
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'BasicRoom' looks like designed for extension (can be subclassed), but the method 'userHasBookingAlready' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRoom' final or making the method 'userHasBookingAlready' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 42
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 43
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 44
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "BasicRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 106).",
        "line": 44
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 52
    },
    {
        "rule": "java:S103",
        "file": "BasicRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Split this 131 characters long line (which is greater than 120 authorized).",
        "line": 53
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "BasicRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 131).",
        "line": 53
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 56
    },
    {
        "rule": "java:S103",
        "file": "BasicRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Split this 126 characters long line (which is greater than 120 authorized).",
        "line": 65
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "BasicRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 126).",
        "line": 65
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 68
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'BasicRoom' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRoom' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 68
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 69
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 73
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'BasicRoom' looks like designed for extension (can be subclassed), but the method 'getDescription' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRoom' final or making the method 'getDescription' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 73
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 74
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'BasicRoom' looks like designed for extension (can be subclassed), but the method 'getBookings' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRoom' final or making the method 'getBookings' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 78
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 78
    },
    {
        "rule": "java:S1106",
        "file": "BasicRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 79
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "Booking.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "13 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "Booking.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "15 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "Booking.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "Booking.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "codehawk:InsufficientModularation",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "This class has InsufficientModularation, there should be over 20 public interfaces, eihther over 30 methods, or has complexity count over 100 times.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 5
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 9
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 14
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'getInterval' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'getInterval' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 14
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'getBooker' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'getBooker' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 18
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 18
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 22
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 22
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 23
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 24
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 28
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 37
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 37
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 38
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 45
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Booking' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Booking' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 45
    },
    {
        "rule": "java:S1106",
        "file": "Booking.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 46
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "ClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "11 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "ClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "11 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "ClassRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Missing package-info.java file.",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "ClassRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 6
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 6
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 10
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 15
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'hasProjector' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'hasProjector' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 15
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 23
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'isValidBooking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'isValidBooking' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 23
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 24
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "ClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 103).",
        "line": 25
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 31
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 31
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 32
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 37
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 37
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 38
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 42
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ClassRoom' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ClassRoom' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 42
    },
    {
        "rule": "java:S1106",
        "file": "ClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 43
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "5 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "5 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "ComputerClassRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "findbugs:EQ_DOESNT_OVERRIDE_EQUALS",
        "file": "ComputerClassRoom.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "booking.ComputerClassRoom doesn't override ClassRoom.equals(Object)",
        "line": 1
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "ComputerClassRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 3
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 119).",
        "line": 8
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 17
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'ComputerClassRoom' looks like designed for extension (can be subclassed), but the method 'isValidBooking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ComputerClassRoom' final or making the method 'isValidBooking' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 17
    },
    {
        "rule": "java:S1106",
        "file": "ComputerClassRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 18
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "GroupRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "9 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "GroupRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "9 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "GroupRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "GroupRoom.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 5
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 9
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 14
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'hasWhiteboard' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'hasWhiteboard' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 14
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 23
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'isValidBooking' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'isValidBooking' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 23
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 24
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck",
        "file": "GroupRoom.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "Line is longer than 100 characters (found 113).",
        "line": 25
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 28
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 28
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 29
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 34
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 34
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 35
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 39
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'GroupRoom' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GroupRoom' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 39
    },
    {
        "rule": "java:S1106",
        "file": "GroupRoom.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 40
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "Interval.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "15 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "Interval.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "17 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "Interval.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "Interval.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 7
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 11
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 16
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'getStartTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'getStartTime' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 16
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 20
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'getEndTime' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'getEndTime' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 20
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 24
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'isDuring' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'isDuring' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 24
    },
    {
        "rule": "fb-contrib:OCP_OVERLY_CONCRETE_PARAMETER",
        "file": "Interval.java",
        "severity": "INFO",
        "type": "CODE_SMELL",
        "message": "booking.Interval.isDuring(LocalDateTime): 1st parameter '' could be declared as java.time.chrono.ChronoLocalDateTime instead",
        "line": 25
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 28
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'overlapsWith' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'overlapsWith' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 28
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 34
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 34
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 35
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 36
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 40
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 49
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 49
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 50
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 54
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'Interval' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Interval' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 54
    },
    {
        "rule": "java:S1106",
        "file": "Interval.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 55
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "Room.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "3 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "Room.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "Room.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 6
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 6
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'abstract' should be explicit.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'public' should be explicit.",
        "line": 7
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'abstract' should be explicit.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'public' should be explicit.",
        "line": 8
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'abstract' should be explicit.",
        "line": 9
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'public' should be explicit.",
        "line": 9
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'abstract' should be explicit.",
        "line": 10
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck",
        "file": "Room.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Implied modifier 'public' should be explicit.",
        "line": 10
    },
    {
        "rule": "common-java:InsufficientLineCoverage",
        "file": "User.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "9 more lines of code need to be covered by tests to reach the minimum threshold of 65.0% lines coverage.",
        "line": 0
    },
    {
        "rule": "common-java:InsufficientCommentDensity",
        "file": "User.java",
        "severity": "MAJOR",
        "type": "CODE_SMELL",
        "message": "12 more comment lines need to be written to reach the minimum threshold of 25.0% comment density.",
        "line": 0
    },
    {
        "rule": "java:S1451",
        "file": "User.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Add or update the header of this file.",
        "line": 0
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck",
        "file": "User.java",
        "severity": "BLOCKER",
        "type": "CODE_SMELL",
        "message": "Missing an import control file.",
        "line": 1
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 5
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Type Javadoc comment is missing null tag.",
        "line": 5
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 10
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 15
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 15
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 19
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'getEmail' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'getEmail' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 19
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 23
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'equals' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'equals' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 23
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 24
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 25
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 29
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 37
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'hashCode' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'hashCode' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 37
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 38
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationOnSameLineCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Annotation 'Override' should be on the same line with its target.",
        "line": 42
    },
    {
        "rule": "checkstyle:com.puppycrawl.tools.checkstyle.checks.design.DesignForExtensionCheck",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Class 'User' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'User' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method.",
        "line": 42
    },
    {
        "rule": "java:S1106",
        "file": "User.java",
        "severity": "MINOR",
        "type": "CODE_SMELL",
        "message": "Move this left curly brace to the beginning of next line of code.",
        "line": 43
    }
]