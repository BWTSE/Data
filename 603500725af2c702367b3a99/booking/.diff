diff -rdBEZN ../../../Scenarios/booking/low_debt/booking/ComputerClassRoom.java .submission/booking/ComputerClassRoom.java
0a1,73
> package booking;
> 
> import java.time.LocalDateTime;
> import java.time.temporal.ChronoField;
> import java.util.Objects;
> import java.util.Optional;
> 
> public class ComputerClassRoom extends Room {
> 
>     private final boolean hasProjector;
>     private final int opens;
>     private final int closes;
> 
>     public ComputerClassRoom(String name, String description, boolean hasProjector, int opens, int closes) {
>         super(name, description);
>         this.hasProjector = hasProjector;
>         this.opens = opens;
>         this.closes = closes;
>     }
> 
>     public boolean hasProjector() {
>         return this.hasProjector;
>     }
>     
>     public int getOpens(){
>     	return this.opens;
>     }
>     
>     public int getCloses(){
>     	return this.closes;
>     }
> 
>     /*
>     Only allows bookings that start on the hour. (Floors second and microsecond values).
>     */
>     @Override
>     public Optional<Booking> book(Interval interval, User customer) {
>         LocalDateTime bookingStart = interval.getStart()
>             .with(ChronoField.SECOND_OF_MINUTE, 0)
>             .with(ChronoField.NANO_OF_SECOND, 0);
> 
>         LocalDateTime bookingEnd = interval.getStart()
>             .with(ChronoField.SECOND_OF_MINUTE, 0)
>             .with(ChronoField.NANO_OF_SECOND, 0);
> 
> 		
> 
>         if (
>             bookingStart.getMinute() != 0
>             || bookingEnd.getMinute() != 0
>             || bookingEnd.with(ChronoField.HOUR_OF_DAY, 0).isAfter(bookingStart)
>             || bookingStart.getHour() >= closes
>             || bookingEnd.getHour() < opens
>         ) {
>             return Optional.empty();
>         }
> 
>         return super.book(new Interval(bookingStart, bookingEnd), customer);
>     }
> 
>     @Override
>     public boolean equals(Object o) {
>         return super.equals(o)
>             && Objects.equals(this.hasProjector(), ((ComputerClassRoom) o).hasProjector())
>             && Objects.equals(this.getOpens(), ((ComputerClassRoom) o).getOpens())
>             && Objects.equals(this.getCloses(), ((ComputerClassRoom) o).getCloses());
>     }
> 
>     @Override
>     public int hashCode() {
>         return Objects.hash(super.hashCode(), this.hasProjector(), this.getOpens(), this.getCloses());
>     }
> }
